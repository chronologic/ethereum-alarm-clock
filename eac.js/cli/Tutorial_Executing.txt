Running the Execution client
----------------------------

To run the Ethereum Alarm Clock client you will need access to a testnet node.
While the EAC is in beta testing, it will only work on the Ropsten or 
Kovan networks. If you run a local node, you will have to unlock a default account.
The EAC client right now uses the first indexed account as the default. If you are 
unsure if you have an account set up please follow the ``Local Node Set-Up Instructions``
below. If you would like to later use the EAC with a remote node (like infura) you will 
need to follow the ``Light Wallet Set-Up`` instructions as well.

Local Node Set-Up Instructions
------------------------------

Currently the EAC client only works with a Parity client node. This is because the 
Parity client supports a special RPC request to fetch pending transactions in the 
transaction pool. We need this RPC request to ensure that accounts do not claim 
transactions on top of each other. You can download the latest version of Parity 
from their website, parity.io.

You can set the Parity client to use either Ropsen of Kovan to interact with the EAC. 
For the sake of the tutorial we will be using the Ropsten testnet, if you want to use 
Kovan instead replace all instances of Ropsten in the following commands with Kovan 
respectively. 

First we will create a new account.

```
$ parity --chain ropsten account new 
```

This will prompt you to enter a new password for your account. Make sure you write it 
down since we will be using it again in the next step. After you enter a password,
it will create the account and print an ethereum address to the console. When you 
start the parity client you will need to make sure that this account is "unlocked."
Save your password in a text file called "pw.txt" and start Parity with the following 
command, replacing <YOUR ACCOUNT> with the address it printed to the console.

```
$ parity --geth --chain ropsten --unlock <YOUR ACCOUNT HERE> --password "pw.txt"
```

Parity will now begin syncing to the Ropsten testnet. You will need some testnet 
ether for your new account. You can use a faucet online or ask someone in Gitter chat.

Light Wallet Set-Up
-------------------

You can use the eac commandline program to create a light wallet with 
a set of addresses that will be cycled through by the client. To do this
run the eac executable with the `--createWallet` flag. The client will then 
ask you for a few questions and create a new wallet file for you. The wallet 
file will be encrypted and saved onto your computer and you will need your 
password to decrypt it. 

```
$ eac --createWallet
How many accounts would you like in your wallet?
3
Where would you like to save the encrypted keys? Please provide a valid filename or path.
./keys
Please enter a password for the keyfile. Write this down!
<your password>
New wallet created!
Accounts:
0x79E944aA5c44C1dA75e30313682bd506A80F2115
0x838378b72b022551F0Ef49b1dA9eFCCF1A1D7294
0x4b7CE6c8d193E31d22C620BcDf8d3590fe2f99C2
Saving encrypted file to ./keys. Don't forget your password!
```

Funding your Wallet
-------------------

Before your client will be able to do anything you will need to fund your 
light wallet accounts with some ether. Since this is just testnet money anyway,
I would recommend sending 5 ether to each one. If you followed this tutorial up to here,
you should be able to use node to run the javascript file located at `script/wallet/2_fundWallet.js`
to send 5 ether to each one of your accounts. If you choose to use this script make sure 
to have enough funds in your default parity account to supply to each account.

If you do not use the script you will have to send ether to each one of your accounts 
manually.

Running the Client 
------------------

You can now run the client with wallet support enabled by using this command and flags:

```
$ eac -c --wallet ./keys --password <your password>
```

It will log some minimal information to the console. To see full logs you can run 
the following command in another terminal screen.

```
$ tail -f ~/.log.eac 
```

The logs are quite verbose, but can in handy if anything goes wrong.

Your client is now scanning the blockchain and storing any new transaction requests 
it sees in a local cache. It will keep track of the requests in the cache and act upon 
them when they are in certain windows. The client will keep track of claiming transactions 
and executing them from the account in your wallet to send the execution attempt from. 
If everything goes as it should, you should see the balances of your light wallet accounts 
increase little amounts everytime you successfully execute a transaction.

Enjoy executing transactions ðŸ™‚

Making a Test transaction
-------------------------

Depending on the popularity of this beta release, there may not be any upcoming transactions 
on the testnet you are using. If this is the case, you can populate the network with 
predefined transactions using the eac tool. To do this, you will need enough ether in your 
default account to fund the transactions, in this case it is approximately ~1 eth. You 
can run the tool like so to schedule a transactions, if successful it will print the completed 
hash to the console.

```
eac -t 
```

Reference
----------

```
$ eac --help

  Usage: eac [options]                                                                                 â”‚
                                                                                                       â”‚
                                                                                                       â”‚
  Options:                                                                                             â”‚
                                                                                                       â”‚
    -V, --version            output the version number                                                 â”‚
    -t, --test               sends a test transaction to the network                                   â”‚
    --createWallet           guides you through creating a new wallet.                                 â”‚
    -c, --client             starts the executing client                                               â”‚
    -m, --milliseconds <ms>  tells the client to scan every <ms> seconds (default: 4000)               â”‚
    --logfile [path]         specifies the output logifle (default: default)                           â”‚
    --chain [ropsten]        selects the chain to use                                                  â”‚
    --provider <string>      set the HttpProvider to use (default: http://localhost:8545)              â”‚
    -w, --wallet [path]      specify the path to the keyfile you would like to unlock (default: none)  â”‚
    -p, --password [string]  the password to unlock your keystore file (default: password)             â”‚
    -s, --schedule           schedules a transactions                                                  â”‚
    -h, --help               output usage information 
```  